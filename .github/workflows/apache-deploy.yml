name: Deploy Apache Site

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  CACHE_VERSION: v1
  NODE_VERSION: '18'

jobs:
  # Validation and testing job
  validate:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate HTML files
      run: |
        echo "🔍 Validating HTML syntax..."
        # Install HTML validator
        sudo apt-get update && sudo apt-get install -y tidy
        
        # Validate each HTML file
        find public-html -name "*.html" -exec tidy -q -e {} \;
        echo "✅ HTML validation completed"
        
    - name: Security scan
      run: |
        echo "🔒 Running security scans..."
        
        # Check for potential XSS vulnerabilities
        if grep -r "document\.write\|innerHTML\|eval(" public-html/; then
          echo "⚠️ Found potentially unsafe JavaScript patterns"
        fi
        
        # Check for hardcoded secrets
        if grep -r -i "password\|secret\|key\|token" public-html/ --exclude="*.md"; then
          echo "⚠️ Found potential hardcoded secrets"
        fi
        
        echo "✅ Security scan completed"

  # Deployment job with proper environment handling
  deploy:
    needs: validate
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Enhanced APT Cache
      uses: actions/cache@v4
      id: apt-cache
      with:
        path: |
          /var/cache/apt/archives
          /var/lib/apt/lists
        key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-apt-${{ hashFiles('.github/workflows/apache-deploy.yml') }}
        restore-keys: |
          ${{ env.CACHE_VERSION }}-${{ runner.os }}-apt-
          
    - name: Setup Apache with Security Hardening
      run: |
        echo "� Installing and configuring Apache with security best practices..."
        
        # Update package lists only if cache miss
        if [ "${{ steps.apt-cache.outputs.cache-hit }}" != "true" ]; then
          sudo apt-get update
        fi
        
        # Install required packages with specific versions for security
        sudo apt-get install -y \
          apache2 \
          apache2-utils \
          bc \
          curl \
          net-tools
          
        # Security hardening
        sudo a2dismod status
        sudo a2dismod info
        sudo a2enmod headers
        sudo a2enmod rewrite
        
        # Configure security headers
        sudo tee /etc/apache2/conf-available/security-headers.conf > /dev/null << 'EOF'
        Header always set X-Content-Type-Options nosniff
        Header always set X-Frame-Options DENY
        Header always set X-XSS-Protection "1; mode=block"
        Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains"
        Header always set Referrer-Policy "strict-origin-when-cross-origin"
        Header always set Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'"
        
        # Hide server information
        ServerTokens Prod
        ServerSignature Off
        EOF
        
        sudo a2enconf security-headers
        
    - name: Deploy with Environment-Specific Configuration
      run: |
        echo "🚀 Deploying to ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }} environment..."
        
        # Stop Apache for clean deployment
        sudo systemctl stop apache2
        
        # Backup existing files
        sudo mkdir -p /var/backups/www-$(date +%Y%m%d-%H%M%S)
        sudo cp -r /var/www/html/* /var/backups/www-$(date +%Y%m%d-%H%M%S)/ 2>/dev/null || true
        
        # Clean deployment directory
        sudo rm -rf /var/www/html/*
        
        # Copy site files with proper permissions
        sudo cp -r public-html/* /var/www/html/
        
        # Set secure permissions
        sudo chown -R www-data:www-data /var/www/html/
        sudo find /var/www/html/ -type f -exec chmod 644 {} \;
        sudo find /var/www/html/ -type d -exec chmod 755 {} \;
        
        # Environment-specific modifications
        if [ "${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}" = "staging" ]; then
          # Add staging banner
          sudo sed -i 's/<body>/<body><div style="background: orange; color: white; text-align: center; padding: 10px; font-weight: bold;">🚧 STAGING ENVIRONMENT 🚧<\/div>/' /var/www/html/index.html
        fi
        
        # Start Apache
        sudo systemctl start apache2
        sudo systemctl enable apache2
        
    - name: Comprehensive Health Checks
      timeout-minutes: 5
      run: |
        echo "🔍 Running comprehensive health checks..."
        
        # Wait for Apache to fully start
        echo "⏳ Waiting for Apache to start..."
        for i in {1..30}; do
          if curl -s http://localhost/ > /dev/null; then
            break
          fi
          sleep 2
        done
        
        # Service health checks
        echo "� Checking service health..."
        sudo systemctl is-active --quiet apache2 || (echo "❌ Apache service failed" && exit 1)
        echo "✅ Apache service is running"
        
        # Network checks
        echo "🔌 Checking network connectivity..."
        ss -tlnp | grep :80 | grep apache2 || (echo "❌ Apache not listening on port 80" && exit 1)
        echo "✅ Apache listening on port 80"
        
        # HTTP response checks
        echo "🌐 Testing HTTP responses..."
        
        # Test with retries
        for page in "" "about.html"; do
          url="http://localhost/$page"
          for attempt in {1..3}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "$url")
            if [ "$response" = "200" ]; then
              echo "✅ $url returns HTTP 200"
              break
            elif [ $attempt -eq 3 ]; then
              echo "❌ $url returns HTTP $response after 3 attempts"
              exit 1
            fi
            sleep 2
          done
        done
        
        # Performance checks
        echo "⏱️ Testing performance..."
        response_time=$(curl -s -o /dev/null -w "%{time_total}" http://localhost/)
        echo "📈 Response time: ${response_time}s"
        
        # Content integrity checks
        echo "📝 Verifying content integrity..."
        curl -s http://localhost/ | grep -q "Hello from Apache!" || (echo "❌ Index content missing" && exit 1)
        curl -s http://localhost/about.html | grep -q "About Page" || (echo "❌ About content missing" && exit 1)
        echo "✅ Content integrity verified"
        
        # Security headers check
        echo "� Verifying security headers..."
        headers_response=$(curl -s -I http://localhost/)
        echo "$headers_response" | grep -q "X-Content-Type-Options" || echo "⚠️ Missing X-Content-Type-Options header"
        echo "$headers_response" | grep -q "X-Frame-Options" || echo "⚠️ Missing X-Frame-Options header"
        
        echo "🎉 All health checks passed!"
        
    - name: Generate Secure Deployment Report
      if: always()
      run: |
        echo "📊 Generating deployment report..."
        
        # Create secure deployment report
        cat > deployment-report.md << EOF
        # 🚀 Deployment Report
        
        **Environment:** ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}
        **Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        **Commit:** $GITHUB_SHA
        **Branch:** $GITHUB_REF_NAME
        **Actor:** $GITHUB_ACTOR
        **Workflow:** $GITHUB_WORKFLOW
        
        ## ✅ Service Status
        - Apache Service: $(sudo systemctl is-active apache2)
        - Port 80 Status: $(ss -tlnp | grep :80 | grep apache2 > /dev/null && echo 'Listening' || echo 'Not Listening')
        - Response Time: $(curl -s -o /dev/null -w '%{time_total}s' http://localhost/ 2>/dev/null || echo 'Failed')
        
        ## 🌐 Endpoint Tests
        - Index Page: HTTP $(curl -s -o /dev/null -w '%{http_code}' http://localhost/ 2>/dev/null || echo 'Failed')
        - About Page: HTTP $(curl -s -o /dev/null -w '%{http_code}' http://localhost/about.html 2>/dev/null || echo 'Failed')
        
        ## 🔒 Security
        - Security Headers: Configured
        - File Permissions: Hardened
        - Server Signature: Hidden
        
        ## 📁 Deployed Files
        \`\`\`
        $(ls -la /var/www/html/ 2>/dev/null || echo 'Directory listing failed')
        \`\`\`
        
        ## 📋 Recent Apache Logs
        \`\`\`
        $(sudo tail -n 10 /var/log/apache2/error.log 2>/dev/null || echo 'Log access failed')
        \`\`\`
        EOF
        
        cat deployment-report.md
        
    - name: Upload Deployment Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: deployment-report-${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }}-${{ github.sha }}
        path: |
          deployment-report.md
        retention-days: ${{ github.ref == 'refs/heads/main' && 90 || 30 }}
        
    - name: Notify Deployment Status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ Deployment to ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }} completed successfully!"
          echo "🌐 Site is now live and healthy"
        else
          echo "❌ Deployment to ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production' || 'staging') }} failed!"
          echo "🔍 Check the logs above for details"
          exit 1
        fi
